# Get the name of the module directory we're in
MODULE := $(dir $(lastword $(MAKEFILE_LIST)))

# Calculate directories to get sources from, and our object directory
CSOURCE_DIR := $(MODULE)source
ASOURCE_DIR := $(MODULE)source
OBJ_DIR := $(MODULE)obj
INCLUDE_DIR := $(MODULE)include
DEP_DIR := $(MODULE)deps

KERNEL_LINKER_SCRIPT := $(MODULE)kernel.ld

# Find all candidates for compiling
ASOURCE := $(shell find $(ASOURCE_DIR) -name '*.asm')
CSOURCE := $(shell find $(CSOURCE_DIR) -name '*.c')

# Remove kloader from standard Nox
ASOURCE := $(filter-out $(ASOURCE_DIR)/kloader/kloader_start.asm, $(ASOURCE))
CSOURCE := $(filter-out $(CSOURCE_DIR)/kloader/kloader_main.c, $(CSOURCE))

# Construct a list of all object files
COBJECTS := $(CSOURCE:.c=.o)
COBJECTS := $(subst $(CSOURCE_DIR), $(OBJ_DIR), $(COBJECTS))
AOBJECTS := $(ASOURCE:.asm=.o)
AOBJECTS := $(subst $(ASOURCE_DIR), $(OBJ_DIR), $(AOBJECTS))

#
# Compiler options
#
PLATFORM_DEBUG:=PLATFORM_DEBUG_BOCHS
PLATFORM_ARCH:=PLATFORM_ARCH_X86
PLATFORM_BITS_VAL:=32
CFLAGS=-std=c11 \
       -ffreestanding \
       -nostdlib \
       -Wall \
       -Werror \
       -c \
       -D $(PLATFORM_DEBUG) \
       -D $(PLATFORM_ARCH) \
       -D PLATFORM_BITS=$(PLATFORM_BITS_VAL)
CINCLUDE := $(patsubst %,-I%, $(shell find $(INCLUDE_DIR) -type d))

# Tell the main makefile which files to copy to the harddisk image
FS_FILES += $(FS_DIR)/kernel.elf

# Tell the main makefile to remove our object dir on clean
CLEAN_DIRS += $(OBJ_DIR) $(DEP_DIR)

# Include dependencies files automatically generated by previous builds
-include $(addprefix $(DEP_DIR)/, $(notdir $(COBJECTS:.o=.d)))

#
# Actually building stuff
#
kernel: $(BUILD_DIR)/kernel.elf

# Note: Build into root build directory
$(BUILD_DIR)/kernel.elf: $(COBJECTS) $(AOBJECTS) $(KERNEL_LINKER_SCRIPT)
	@echo "$(TIME) LD       $@"
	@$(TOOL)-ld -T $(KERNEL_LINKER_SCRIPT) -Map=$(BUILD_DIR)/kernel.map $(filter-out $(KERNEL_LINKER_SCRIPT), $^) -o $@

$(OBJ_DIR)/%.o : $(CSOURCE_DIR)/%.c
	@mkdir -p $(dir $@)
	@mkdir -p $(DEP_DIR)/$(dir $*)
	@echo "$(TIME) CC       $<"
	@$(TOOL)-gcc $< -o $@ $(CINCLUDE) $(CFLAGS) -MD -MF $(DEP_DIR)/$*.d

$(OBJ_DIR)/%.o : $(ASOURCE_DIR)/%.asm

	@mkdir -p $(dir $@)
	@echo "$(TIME) AS       $<"
	@nasm $< -o $@ -f elf32 -i $(INCLUDE_DIR)

.PHONY:
